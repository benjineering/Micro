using Micro.Common;
using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;

namespace Micro.Core.Generators
{
    static class ClassGenerator
    {
        public static void Generate(SourceProductionContext context, IEnumerable<Class> classes)
        {
            var values = new List<string>();
            foreach (var klass in classes)
            {
                var methods = klass.Methods.Select(x => $@"new Method(
                            ""{x.Name}"",
                            new Parameter[]
                            {{
                                {string.Join(@"
                                ", x.Parameters.Select(y => $@"new Parameter(""{y.Name}"", new TypeName(""{y.Type.Namespace}"", ""{y.Type.Name}"")),"))}
                            }},
                            new TypeName(""{x.ReturnType.Namespace}"", ""{x.ReturnType.Name}"")
                        ),");

                var value = $@"new Class(
                    new TypeName(""{klass.Name.Namespace}"", ""{klass.Name.Name}""),
                    new Method[]
                    {{
                        {string.Join(@"
                        ", methods)}
                    }}),";

                values.Add(value);
            }

            var source = $@"/*************************************************
* Automatically generated by Micro - do not edit *
**************************************************/

using Micro.Common;

namespace Micro.Core.Generated
{{
    protected static class ClassData
    {{
        private static Class[] Values = new Class[]
        {{
            {string.Join("" + @"
            ", values)}
        }}
    }}
}}
";
            context.AddSource("ClassData.g.cs", source);
        }
    }
}
